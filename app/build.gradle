apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion 29
    ndkVersion '21.3.6528147'

    lintOptions {
        lintConfig file("../lint.xml")
    }

    dexOptions {
        javaMaxHeapSize "4G"
    }

    defaultConfig {
        applicationId "vn.vhn.vsc"
        minSdkVersion 24
        if (System.env['GPLAY_BUILD'] == '1') {
            defaultConfig.targetSdkVersion 29 // google play require minimum version to be 29
        } else {
            defaultConfig.targetSdkVersion 28 // Dont update to 29 - /data/data no longer executable
        }
        versionCode 24
        versionName "1.6.0"

        externalNativeBuild {
            ndkBuild {
                cFlags "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            if (System.env['GPLAY_BUILD'] != '1' && System.env['CI_BUILD'] != '1') {
                abiFilters 'arm64-v8a'
            } else if (System.env['USE_SPLITBUILD'] != '1') {
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    if (System.env['USE_SPLITBUILD'] == '1') {
        splits {
            abi {
                enable true
                reset()
                include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                universalApk false
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file('keystore')
            keyAlias 'alias'
            storePassword '123456'
            keyPassword '123456'
        }
        release {
            storeFile file('keystore')
            keyAlias 'alias'
            storePassword '123456'
            keyPassword '123456'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}

def downloadBootstrap(String arch, String expectedChecksum, String version) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def localUrl = "src/main/cpp/bootstrap-" + arch + ".zip"
    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = new BigInteger(1, digest.digest()).toString(16)
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl)
            file.delete()
        }
    }

    def remoteUrl = "https://github.com/vhqtvn/termux-packages/releases/download/" + version + "/bootstrap-" + arch + ".zip"
    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    if (checksum != expectedChecksum) {
        file.delete()
        throw new GradleException("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

task downloadBootstraps() {
    doLast {
        def version = "bootstrap-2022.01.30-r3"
        downloadBootstrap("aarch64", "df0a40c6dca5d9bb6511afa6ff536a586a687a3c0bb415f9fba3c8b395f9ecca", version)
        downloadBootstrap("arm", "16eea17539fa753a8d068a7166a2f9cc1582531103ce7a7f646aaa4c43fcc92f", version)
        downloadBootstrap("i686", "d8a328e4331a436027d8dba7f406e4fcca76c9d6430e871bbef667f3b8df0b28", version)
        downloadBootstrap("x86_64", "bc09af02530a0839c86ed216541c36c0f58fb3594a151978415e799797d6e965", version)
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.get().dependsOn(downloadBootstraps)
    }
}
