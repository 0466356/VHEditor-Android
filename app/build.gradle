apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'


android {
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    ndkVersion System.getenv("JITPACK_NDK_VERSION") ?: project.properties.ndkVersion


    dexOptions {
        javaMaxHeapSize "4G"
    }

    defaultConfig {
        applicationId "vn.vhn.vsc"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        if (System.env['GPLAY_BUILD'] == '1') {
            defaultConfig.targetSdkVersion 29 // google play require minimum version to be 29
        } else {
            defaultConfig.targetSdkVersion 28 // Dont update to 29 - /data/data no longer executable
        }
        versionCode 32
        versionName "2.0.2"

        externalNativeBuild {
            ndkBuild {
                cFlags "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            if (System.env['GPLAY_BUILD'] != '1' && System.env['CI_BUILD'] != '1') {
                abiFilters 'arm64-v8a'
            } else if (System.env['USE_SPLITBUILD'] != '1') {
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    if (System.env['USE_SPLITBUILD'] == '1') {
        splits {
            abi {
                enable true
                reset()
                include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                universalApk false
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file('keystore')
            keyAlias 'alias'
            storePassword '123456'
            keyPassword '123456'
        }
        release {
            storeFile file('keystore')
            keyAlias 'alias'
            storePassword '123456'
            keyPassword '123456'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }
    lint {
        lintConfig file('../lint.xml')
    }
    namespace 'vn.vhn.vhscode'
    buildFeatures {
        viewBinding true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.github.Dimezis:BlurView:version-2.0.0'

    api project(':termux-shared')
    api project(':terminal-emulator')
    api project(':terminal-view')
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}

def downloadRemoteArchive(String arch, String localUrl, String remoteUrl, String expectedChecksum, String version) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = String.format("%1\$64s", new BigInteger(1, digest.digest()).toString(16)).replace(' ', '0')
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl)
            file.delete()
        }
    }

    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    if (checksum != expectedChecksum.replaceAll("^0+", "")) {
        file.delete()
        throw new Exception("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

def downloadBootstrap(String arch, String expectedChecksum, String version) {
    downloadRemoteArchive(
            arch,
            "src/main/cpp/bootstrap-" + arch + ".zip",
            "https://github.com/vhqtvn/termux-packages/releases/download/" + version + "/bootstrap-" + arch + ".zip",
            expectedChecksum,
            version
    )
}

def downloadCodeServer(String arch, String expectedChecksum, String version) {
    downloadRemoteArchive(
            arch,
            "src/main/cpp/cs-" + arch + ".tgz",
            "https://github.com/vhqtvn/vscode-android-server/releases/download/" + version + "/cs-" + arch + ".tgz",
            expectedChecksum,
            version
    )
}


task downloadBootstraps() {
    doLast {
        def version = "bootstrap-2022.05.03-r3+apt-android-7"
        downloadBootstrap("aarch64", "f4bc63df9e0f6a332ce0d117b9b49b6937abf4fad164102dba231e57098a2852", version)
        downloadBootstrap("arm", "cd5a1f89ab3c34066ddab2136e5f6dfa7cdcfdf137f694007bef03185b503b9c", version)
        downloadBootstrap("i686", "0fba24f2ca881ee5e02eaefee2f8acf518234e1da52847cee207e6af807fc097", version)
        downloadBootstrap("x86_64", "1473cf5aa111112a9167d904fa487269147fffe9e92ab1ec9ff71dc9053533f6", version)

        def csVersion = "cs-2022.05.09-r1"
        downloadCodeServer("aarch64", "78088dcb95cd166bd671006b834373159a29105f1d4ec0a0f645bb518a30775b", csVersion)
        downloadCodeServer("arm", "7c0bd410ccda7da6f319ea193ed17246265a44a0ed907a94521294cee57a645a", csVersion)
        downloadCodeServer("x86", "423098a2e7e95e6a8982ccc99ea0edff4212b2d66b5c505b1b3c4d3712c2fa97", csVersion)
        downloadCodeServer("x86_64", "7fb060d9019b354603bc9653c2d9a5ed9301b7562ebb3124c81fc4cbafb74525", csVersion)
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.get().dependsOn(downloadBootstraps)
    }
}
